     1                                          ;
     2                                          ; CubicDoom
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ;
     6                                          ; Dan O'Malley - Removed color enemies to make it more of an exploration demo.        
     7                                  
     8                                  
     9                                  EMPTY:  equ 0x00        ; Code for empty space
    10                                  WALL:   equ 0x80        ; Code for wall
    11                                  
    12                                  
    13                                          org 0x7c00
    14                                  
    15                                  
    16                                  rnd:    equ 0x0008      ; Random number
    17                                  px:     equ 0x0006      ; Current X position (4.12)
    18                                  py:     equ 0x0004      ; Current Y position (4.12)
    19                                  pa:     equ 0x0002      ; Current screen angle
    20                                  oldtim: equ 0x0000      ; Old time
    21                                  
    22                                  maze:   equ 0xff00      ; Location of maze (16x16)
    23                                  
    24                                          ;
    25                                          ; Start of the game
    26                                          ;
    27                                  start:
    28 00000000 B81300                          mov ax,0x0013   ; Graphics mode 320x200x256 colors
    29 00000003 CD10                            int 0x10        ; Setup video mode
    30 00000005 B800A0                          mov ax,0xa000   ; Point to video memory.
    31 00000008 8ED8                            mov ds,ax
    32 0000000A 8EC0                            mov es,ax
    33                                  restart:
    34 0000000C FC                              cld
    35 0000000D 31C9                            xor cx,cx
    36 0000000F 51                              push cx         ; shot
    37 00000010 E540                            in ax,0x40
    38 00000012 50                              push ax         ; rnd
    39 00000013 B418                            mov ah,0x18     ; Start point at maze
    40 00000015 50                              push ax         ; px
    41 00000016 50                              push ax         ; py
    42 00000017 B104                            mov cl,0x04
    43 00000019 51                              push cx         ; pa
    44 0000001A 51                              push cx         ; oldtim
    45 0000001B 89E5                            mov bp,sp       ; Setup BP to access variables
    46                                  
    47 0000001D BB00FF                          mov bx,maze     ; Point to maze
    48 00000020 88D8                    .0:     mov al,bl
    49 00000022 0411                            add al,0x11     ; Right and bottom borders at zero
    50 00000024 3C22                            cmp al,0x22     ; Inside any border?
    51 00000026 7206                            jb .5           ; Yes, jump
    52 00000028 240E                            and al,0x0e     ; Inside left/right border?
    53 0000002A B000                            mov al,EMPTY
    54 0000002C 7502                            jne .4          ; No, jump
    55 0000002E B080                    .5:     mov al,WALL
    56 00000030 8807                    .4:     mov [bx],al     ; Put into maze
    57 00000032 43                              inc bx          ; Next square
    58 00000033 75EB                            jne .0          ; If BX is zero, maze completed
    59                                          
    60 00000035 B10C                            mov cl,12       ; 12 walls
    61 00000037 BF22FF                          mov di,maze+34  ; Point to center of maze
    62 0000003A B20C                            mov dl,12       ; Modulo 12 for random number
    63                                  .2:
    64 0000003C E8F900                          call random
    65 0000003F C60180                          mov byte [di+bx],WALL   ; Setup a wall
    66 00000042 83C710                          add di,16       ; Go to next row of maze
    67 00000045 E2F5                            loop .2         ; Repeat until filled
    68                                  game_loop:
    69 00000047 E80101                          call wait_frame ; Wait a frame
    70                                  
    71 0000004A 80E21F                          and dl,31       ; 32 frames have passed?
    72 0000004D 7500                            jnz draw3d         ; No, jump
    73                                  
    74                                  
    75                                  draw3d:
    76                                  
    77                                          ;
    78                                          ; Draw 3D view
    79                                          ;
    80 0000004F BF2700                          mov di,39       ; Column number is 39
    81                                  .2:
    82 00000052 8D45EC                          lea ax,[di-20]  ; Almost 60 degrees to left
    83 00000055 034602                          add ax,[bp+pa]  ; Get vision angle
    84 00000058 E88A00                          call get_dir    ; Get position and direction
    85                                  .3:
    86 0000005B E8AE00                          call read_maze  ; Verify wall hit
    87 0000005E 73FB                            jnc .3          ; Continue if it was open space
    88                                  
    89                                  .4:
    90 00000060 B90412                          mov cx,0x1204   ; Add grayscale color set...
    91                                                          ; ...also load CL with 4. (division by 16)
    92                                  
    93 00000063 8D450C                          lea ax,[di+12]  ; Get cos(-30) to cos(30)
    94 00000066 E88900                          call get_sin    ; Get cos (8 bit fraction)
    95 00000069 F7E6                            mul si          ; Correct wall distance to...
    96 0000006B 88E3                            mov bl,ah       ; ...avoid fishbowl effect
    97 0000006D 88D7                            mov bh,dl       ; Divide by 256
    98 0000006F 43                              inc bx          ; Avoid zero value
    99                                  
   100 00000070 B80008                          mov ax,0x0800   ; Constant for projection plane
   101 00000073 99                              cwd
   102 00000074 F7F3                            div bx          ; Divide
   103 00000076 3DC600                          cmp ax,198      ; Limit to screen height
   104 00000079 7203                            jb .14
   105 0000007B B8C600                          mov ax,198
   106 0000007E 89C6                    .14:    mov si,ax       ; Height of wall
   107                                  
   108 00000080 D3E8                            shr ax,cl       ; Divide distance by 16
   109 00000082 00E8                            add al,ch       ; Add palette index
   110 00000084 93                              xchg ax,bx      ; Put into BX
   111                                  
   112 00000085 57                              push di
   113 00000086 49                              dec cx          ; CL=3. Multiply column by 8 pixels
   114 00000087 D3E7                            shl di,cl
   115                                  
   116 00000089 B8C800                          mov ax,200      ; Height of screen...
   117 0000008C 29F0                            sub ax,si       ; ...minus wall height
   118 0000008E D1E8                            shr ax,1        ; Divide by 2
   119                                  
   120 00000090 50                              push ax
   121 00000091 56                              push si
   122 00000092 91                              xchg ax,cx
   123 00000093 B007                            mov al, 0x07      ; Ceil color
   124 00000095 E89300                          call fill_column
   125 00000098 93                              xchg ax,bx      ; Wall color
   126 00000099 59                              pop cx
   127 0000009A E88E00                          call fill_column
   128 0000009D B008                            mov al,0x8     ; Floor color (a la Wolfenstein)
   129 0000009F 59                              pop cx
   130 000000A0 E88800                          call fill_column
   131 000000A3 5F                              pop di
   132 000000A4 4F                              dec di          ; Decrease column
   133 000000A5 79AB                            jns .2          ; Completed? No, jump.
   134                                  
   135 000000A7 B402                            mov ah,0x02     ; Service 0x02 = Read modifier keys
   136 000000A9 CD16                            int 0x16        ; Call BIOS
   137                                  
   138 000000AB 8B5E02                          mov bx,[bp+pa]  ; Get current angle
   139 000000AE A804                            test al,0x04    ; Left Ctrl pressed?
   140 000000B0 7402                            je .8
   141 000000B2 4B                              dec bx          ; Decrease angle
   142 000000B3 4B                              dec bx
   143                                  .8:
   144 000000B4 A808                            test al,0x08    ; Left Alt pressed? was 0x08
   145 000000B6 7402                            je .9
   146 000000B8 43                              inc bx          ; Increase angle
   147 000000B9 43                              inc bx
   148                                  .9:
   149 000000BA B401                            mov ah,1        ; No shot
   150 000000BC A801                            test al,0x01    ; Right shift pressed?
   151 000000BE 7405                            je .11
   152 000000C0 F6C701                          test bh,0x01    ; But not before?
   153 000000C3 7500                            jne .11
   154                                  
   155                                  
   156                                  .11:    
   157 000000C5 88C7                            mov bh,al
   158 000000C7 895E02                          mov [bp+pa],bx  ; Update angle
   159                                  
   160 000000CA A802                            test al,0x02    ; Left shift pressed?
   161 000000CC 7414                            je .10
   162 000000CE 93                              xchg ax,bx      ; Put angle into AX
   163 000000CF E81300                          call get_dir    ; Get position and direction
   164 000000D2 E83700                  .5:     call read_maze  ; Move and check for wall hit
   165 000000D5 720B                            jc .10          ; Hit, jump without updating position.
   166 000000D7 83FE04                          cmp si,4        ; Four times (the speed)
   167 000000DA 75F6                            jne .5
   168                                  
   169 000000DC 895606                          mov [bp+px],dx  ; Update X position
   170 000000DF 895E04                          mov [bp+py],bx  ; Update Y position
   171                                  .10:
   172 000000E2 E962FF                          jmp game_loop   ; Repeat game loop
   173                                  
   174                                          ;
   175                                          ; Get a direction vector
   176                                          ;
   177                                  get_dir:
   178 000000E5 31F6                            xor si,si       ; Wall distance = 0
   179 000000E7 8B5606                          mov dx,[bp+px]  ; Get X position
   180 000000EA 50                              push ax
   181 000000EB E80400                          call get_sin    ; Get sine
   182 000000EE 91                              xchg ax,cx      ; Onto DX
   183 000000EF 58                              pop ax
   184 000000F0 0420                            add al,32       ; Add 90 degrees to get cosine
   185                                          ;
   186                                          ; Get sine
   187                                          ;
   188                                  get_sin:
   189 000000F2 A840                            test al,64      ; Angle >= 180 degrees?
   190 000000F4 9C                              pushf
   191 000000F5 A820                            test al,32      ; Angle 90-179 or 270-359 degrees?
   192 000000F7 7402                            je .2
   193 000000F9 341F                            xor al,31       ; Invert bits (reduces table)
   194                                  .2:
   195 000000FB 83E01F                          and ax,31       ; Only 90 degrees in table
   196 000000FE BB[5801]                        mov bx,sin_table
   197 00000101 2ED7                            cs xlat         ; Get fraction
   198 00000103 9D                              popf
   199 00000104 7402                            je .1           ; Jump if angle less than 180
   200 00000106 F7D8                            neg ax          ; Else negate result
   201                                  .1:
   202 00000108 8B5E04                          mov bx,[bp+py]  ; Get Y position
   203 0000010B C3                              ret
   204                                  
   205                                          ;
   206                                          ; Read maze
   207                                          ;
   208                                  read_maze:
   209 0000010C 46                              inc si          ; Count distance to wall
   210 0000010D 01CA                            add dx,cx       ; Move X
   211 0000010F 01C3                            add bx,ax       ; Move Y
   212 00000111 53                              push bx
   213 00000112 51                              push cx
   214 00000113 E80700                          call get_pos
   215 00000116 8A1F                            mov bl,[bx]     ; Read maze byte
   216 00000118 D0E3                            shl bl,1        ; Carry = 1 = wall, Zero = Wall 0 / 1
   217 0000011A 59                              pop cx
   218 0000011B 5B                              pop bx
   219 0000011C C3                              ret             ; Return
   220                                  
   221                                          ;
   222                                          ; Convert coordinates to position
   223                                          ;
   224                                  get_pos:        
   225 0000011D 88F3                            mov bl,dh       ; X-coordinate 
   226 0000011F B104                            mov cl,0x04     ; Divide by 4096
   227 00000121 D2EB                            shr bl,cl
   228 00000123 80E7F0                          and bh,0xf0     ; Y-coordinate / 4096 * 16
   229 00000126 08FB                            or bl,bh        ; Translate to maze array
   230 00000128 B7FF                            mov bh,maze>>8
   231 0000012A C3                              ret
   232                                  
   233                                          ;
   234                                          ; Fill a screen column
   235                                          ;
   236                                  fill_column:
   237 0000012B 88C4                            mov ah,al       ; Duplicate pixel value
   238                                  .1:
   239 0000012D AB                              stosw           ; Draw 2 pixels
   240 0000012E AB                              stosw           ; Draw 2 pixels
   241 0000012F AB                              stosw           ; Draw 2 pixels
   242 00000130 AB                              stosw           ; Draw 2 pixels
   243 00000131 81C73801                        add di,0x0138   ; Go to next row
   244 00000135 E2F6                            loop .1         ; Repeat until fully drawn
   245 00000137 C3                              ret             ; Return
   246                                  
   247                                          ;
   248                                          ; Generate a pseudo-random number (from bootRogue)
   249                                          ;
   250                                  random:
   251 00000138 B0FB                            mov al,251
   252 0000013A F66608                          mul byte [bp+rnd]
   253 0000013D 0453                            add al,83
   254 0000013F 884608                          mov [bp+rnd],al
   255 00000142 B400                            mov ah,0
   256 00000144 F6F2                            div dl
   257 00000146 88E3                            mov bl,ah
   258 00000148 B700                            mov bh,0
   259 0000014A C3                              ret
   260                                  
   261                                          ;
   262                                          ; Wait a frame (18.2 hz)
   263                                          ;
   264                                  wait_frame:
   265                                  .1:
   266 0000014B B400                            mov ah,0x00     ; Get ticks
   267 0000014D CD1A                            int 0x1a        ; Call BIOS time service
   268 0000014F 3B5600                          cmp dx,[bp+oldtim]   ; Same as old time?
   269 00000152 74F7                            je .1           ; Yes, wait.
   270 00000154 895600                          mov [bp+oldtim],dx
   271 00000157 C3                              ret
   272                                  
   273                                          ;
   274                                          ; Sine table (0.8 format)
   275                                          ;
   276                                          ; 32 bytes are 90 degrees.
   277                                          ;
   278                                  sin_table:
   279 00000158 00091624313E4753        	db 0x00,0x09,0x16,0x24,0x31,0x3e,0x47,0x53
   280 00000160 606C78808B96A1AB        	db 0x60,0x6c,0x78,0x80,0x8b,0x96,0xa1,0xab
   281 00000168 B5BBC4CCD4DBE0E6        	db 0xb5,0xbb,0xc4,0xcc,0xd4,0xdb,0xe0,0xe6
   282 00000170 ECF1F5F7FAFDFFFF                db 0xec,0xf1,0xf5,0xf7,0xfa,0xfd,0xff,0xff
   283                                  
   284                                  
   285 00000178 4F<rep 86h>             	times 510-($-$$) db 0x4f
   286 000001FE 55AA                    	db 0x55,0xaa           ; Make it a bootable sector
   287                                  
